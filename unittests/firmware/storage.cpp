extern "C" {
#include "keepkey/firmware/storage.h"
#include "keepkey/board/keepkey_board.h"
#include "types.pb.h"
}

#include "gtest/gtest.h"

TEST(Storage, StorageUpgrade) {
    static const uint8_t config_5_buffer[] = {
        /*00000000:*/ 0x73, 0x74,  0x6f, 0x72,  0x21, 0xf6,  0x29, 0xc0,  0xbf, 0x8c,  0x36, 0x16,  0x78, 0x57,  0xfe, 0x2d,  /*stor!.)...6.xW.-*/
        /*00000010:*/ 0x32, 0x31,  0x46, 0x36,  0x32, 0x39,  0x43, 0x30,  0x42, 0x46,  0x38, 0x43,  0x33, 0x36,  0x31, 0x36,  /*21F629C0BF8C3616*/
        /*00000020:*/ 0x37, 0x38,  0x35, 0x37,  0x46, 0x45,  0x32, 0x44,  0x00, 0x00,  0x00, 0x00,  0x05, 0x00,  0x00, 0x00,  /*7857FE2D........*/
        /*00000030:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000040:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000050:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000060:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000070:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000080:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000090:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*000000a0:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*000000b0:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x01, 0x61,  0x6c, 0x63,  0x6f, 0x68,  0x6f, 0x6c,  /*.........alcohol*/
        /*000000c0:*/ 0x20, 0x77,  0x6f, 0x6d,  0x61, 0x6e,  0x20, 0x61,  0x62, 0x75,  0x73, 0x65,  0x20, 0x6d,  0x75, 0x73,  /* woman abuse mus*/
        /*000000d0:*/ 0x74, 0x20,  0x64, 0x75,  0x72, 0x69,  0x6e, 0x67,  0x20, 0x6d,  0x6f, 0x6e,  0x69, 0x74,  0x6f, 0x72,  /*t during monitor*/
        /*000000e0:*/ 0x20, 0x6e,  0x6f, 0x62,  0x6c, 0x65,  0x20, 0x61,  0x63, 0x74,  0x75, 0x61,  0x6c, 0x20,  0x6d, 0x69,  /* noble actual mi*/
        /*000000f0:*/ 0x78, 0x65,  0x64, 0x20,  0x74, 0x72,  0x61, 0x64,  0x65, 0x20,  0x61, 0x6e,  0x67, 0x65,  0x72, 0x20,  /*xed trade anger */
        /*00000100:*/ 0x61, 0x69,  0x73, 0x6c,  0x65, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*aisle...........*/
        /*00000110:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000120:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000130:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000140:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000150:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000160:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000170:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000180:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000190:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*000001a0:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x01, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*000001b0:*/ 0x00, 0x00,  0x00, 0x00,  0x01, 0x31,  0x33, 0x33,  0x37, 0x39,  0x38, 0x37,  0x36, 0x00,  0x00, 0x01,  /*.....13379876...*/
        /*000001c0:*/ 0x65, 0x6e,  0x67, 0x6c,  0x69, 0x73,  0x68, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*english.........*/
        /*000001d0:*/ 0x00, 0x01,  0x45, 0x52,  0x43, 0x32,  0x30, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*..ERC20.........*/
        /*000001e0:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*000001f0:*/ 0x00, 0x00,  0x00, 0x01,  0x01, 0x00,  0x00, 0x00,  0x01, 0x00,  0x00, 0x00,  0x01, 0x53,  0x68, 0x61,  /*.............Sha*/
        /*00000200:*/ 0x70, 0x65,  0x53, 0x68,  0x69, 0x66,  0x74, 0x00,  0x00, 0x00,  0x00, 0x00,  0x01, 0x00,  0x00, 0x00,  /*peShift.........*/
        /*00000210:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000220:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000230:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000240:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  /*................*/
        /*00000250:*/ 0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0x00, 0x00,  0xff, 0xff,  0xff, 0xff,  /*................*/
    };

    const ConfigFlash *config_5 = (const ConfigFlash *)config_5_buffer;
    ASSERT_EQ(memcmp(config_5->meta.magic, STORAGE_MAGIC_STR, STORAGE_MAGIC_LEN), 0);
    ASSERT_EQ(memcmp(config_5->meta.uuid, "\x21\xf6\x29\xc0\xbf\x8c\x36\x16\x78\x57\xfe\x2d", STORAGE_UUID_LEN), 0);
    ASSERT_EQ(memcmp(config_5->meta.uuid_str, "21F629C0BF8C36167857FE2D", STORAGE_UUID_STR_LEN), 0);
}

TEST(Storage, DumpNode) {
    HDNodeType dst;
    StorageHDNode src = {
      .depth = 42,
      .fingerprint = 37,
      .child_num = 11,
      .chain_code = { 4, { 1, 2, 3, 4 } },
      .has_private_key = true,
      .private_key = { 3, { 5, 6, 7 } },
      .has_public_key = true,
      .public_key = { 1, { 74 } },
    };

    memset(&dst, 0, sizeof(dst));
    storage_dumpNode(&dst, &src);

#if !DEBUG_LINK
    EXPECT_EQ(dst.depth, 0);
    EXPECT_EQ(dst.fingerprint, 0);
    EXPECT_EQ(dst.child_num, 0);
    EXPECT_EQ(dst.chain_code.size, 0);
    EXPECT_EQ(dst.chain_code.bytes[0], 0);
    EXPECT_EQ(dst.has_private_key, 0);
    EXPECT_EQ(dst.private_key.size, 0);
    EXPECT_EQ(dst.private_key.bytes[0], 0);
    EXPECT_EQ(dst.has_public_key, 0);
    EXPECT_EQ(dst.public_key.size, 0);
    EXPECT_EQ(dst.public_key.bytes[0], 0);
#else
    EXPECT_EQ(dst.depth, src.depth);
    EXPECT_EQ(dst.fingerprint, src.fingerprint);
    EXPECT_EQ(dst.child_num, src.child_num);
    EXPECT_EQ(dst.chain_code.size, src.chain_code.size);
    EXPECT_EQ(dst.chain_code.bytes[0], src.chain_code.bytes[0]);
    EXPECT_EQ(dst.has_private_key, src.has_private_key);
    EXPECT_EQ(dst.private_key.size, src.private_key.size);
    EXPECT_EQ(dst.private_key.bytes[0], src.private_key.bytes[0]);
    EXPECT_EQ(dst.has_public_key, src.has_public_key);
    EXPECT_EQ(dst.public_key.size, src.public_key.size);
    EXPECT_EQ(dst.public_key.bytes[0], src.public_key.bytes[0]);

    memset(&dst, 0, sizeof(dst));
    src.has_private_key = false;
    storage_dumpNode(&dst, &src);

    EXPECT_EQ(dst.depth, src.depth);
    EXPECT_EQ(dst.fingerprint, src.fingerprint);
    EXPECT_EQ(dst.child_num, src.child_num);
    EXPECT_EQ(dst.chain_code.size, src.chain_code.size);
    EXPECT_EQ(dst.chain_code.bytes[0], src.chain_code.bytes[0]);
    EXPECT_EQ(dst.has_private_key, src.has_private_key);
    EXPECT_EQ(dst.private_key.size, 0);
    EXPECT_EQ(dst.private_key.bytes[0], 0);
    EXPECT_EQ(dst.has_public_key, src.has_public_key);
    EXPECT_EQ(dst.public_key.size, src.public_key.size);
    EXPECT_EQ(dst.public_key.bytes[0], src.public_key.bytes[0]);

    memset(&dst, 0, sizeof(dst));
    src.has_public_key = false;
    storage_dumpNode(&dst, &src);

    EXPECT_EQ(dst.depth, src.depth);
    EXPECT_EQ(dst.fingerprint, src.fingerprint);
    EXPECT_EQ(dst.child_num, src.child_num);
    EXPECT_EQ(dst.chain_code.size, src.chain_code.size);
    EXPECT_EQ(dst.chain_code.bytes[0], src.chain_code.bytes[0]);
    EXPECT_EQ(dst.has_private_key, src.has_private_key);
    EXPECT_EQ(dst.private_key.size, 0);
    EXPECT_EQ(dst.private_key.bytes[0], 0);
    EXPECT_EQ(dst.has_public_key, src.has_public_key);
    EXPECT_EQ(dst.public_key.size, 0);
    EXPECT_EQ(dst.public_key.bytes[0], 0);
#endif
}
