/*
	Types for KeepKey communication

	Author: Darin Stanchfield <darin@stanchfield.com>

	Version: 0.1
*/

import "google/protobuf/descriptor.proto";

extend google.protobuf.EnumValueOptions {
	optional bool wire_in = 50002;	// message can be transmitted via wire from PC to KeepKey
	optional bool wire_out = 50003;	// message can be transmitted via wire from KeepKey to PC
}

enum FailureType {
	Failure_UnexpectedMessage = 1;
	Failure_ButtonExpected = 2;
	Failure_SyntaxError = 3;
	Failure_ActionCancelled = 4;
	Failure_PinExpected = 5;
	Failure_PinCancelled = 6;
	Failure_PinInvalid = 7;
	Failure_InvalidSignature = 8;
	Failure_Other = 9;
	Failure_NotEnoughFunds = 10;
	Failure_NotInitialized = 11;
	Failure_FirmwareError = 99;
}

// Specifies which script will be used for given transaction output.
enum ScriptType {
	PAYTOADDRESS = 0;
	PAYTOSCRIPTHASH = 1;
}

// Specifies which kind of information is required by transaction signing process
enum RequestType {
	TXINPUT = 0;
	TXOUTPUT = 1;
}

enum ButtonRequestType {
	ButtonRequest_Other = 1;
	ButtonRequest_FeeOverThreshold = 2;
	ButtonRequest_ConfirmOutput = 3;
	ButtonRequest_ResetDevice = 4;
	ButtonRequest_ConfirmWord = 5;
	ButtonRequest_WipeDevice = 6;
	ButtonRequest_ProtectCall = 7;
	ButtonRequest_SignTx = 8;
}

// Structure of BIP32 (hierarchical deterministic) node
// Used for imports of private key into the device and exporting public key out of device
message HDNodeType {
	required uint32 depth = 1;
	required uint32 fingerprint = 2;
	required uint32 child_num = 3;
	required bytes chain_code = 4;
	optional bytes private_key = 5;
	optional bytes public_key = 6;
}

message CoinType {
	optional string coin_name = 1;
	optional string coin_shortcut = 2;
	optional uint32 address_type = 3;
	optional uint64 maxfee_kb = 4;
}

message TxInputType {
	required HDNodeType computer_client_node = 1;	// Computer client's master node used for multisig
	repeated uint32 address_n = 2;					// Parameter for address generation algorithm to derive the address from the master node
	required bytes prev_hash = 3;					// Hash of previous transaction output to spend by this input
	required uint32 prev_index = 4;					// Index of previous output to spend
	optional bytes script_sig = 5;					// Script signature
	optional uint32 sequence = 6 [default=0xffffffff];
}

message TxOutputType {
	optional string address = 1;					// Target bitcoin address in base58 encoding
	optional HDNodeType computer_client_node = 2;	// Computer client's master node used for multisig change addresses
	repeated uint32 address_n = 3;					// Has higher priority than "address" and used in conjuntion with "computer_client_node".
	required uint64 amount = 4;						// Amount to send in satoshis
	required ScriptType script_type = 5;			// Select output script type
	repeated bytes script_args = 6;					// Provide additional parameters for the script (its script-depended)
}

// Transaction output with script pubkey in binary form.
// This is used for obtaining hashes of existing transactions
// and for compiling TxOutput for signing.
message TxOutputBinType {
	required uint64 amount = 1;
	required bytes script_pubkey = 2;
}

message TransactionType {
	optional uint32 version = 1 [default=1];
	repeated TxInputType inputs = 2;
	repeated TxOutputBinType outputs = 3;
	optional uint32 lock_time = 4 [default=0];
}
